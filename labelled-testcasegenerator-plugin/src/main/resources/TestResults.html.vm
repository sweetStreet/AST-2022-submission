<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" 
      integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous" />

	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://codemirror.net/lib/codemirror.css" />
    <link rel="stylesheet" href="https://codemirror.net/addon/merge/merge.css" />
    <script src="https://codemirror.net/lib/codemirror.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/diff_match_patch/20121119/diff_match_patch.js"></script>
    <script src="https://codemirror.net/addon/merge/merge.js"></script>
    <script src="https://codemirror.net/mode/htmlmixed/htmlmixed.js"></script>
    <script src="https://codemirror.net/mode/xml/xml.js"></script>
    <script src="https://codemirror.net/mode/css/css.js"></script>
    <script src=" https://codemirror.net/mode/javascript/javascript.js"></script>

    <style type="text/css">
      body {
        padding: 80px 0 10px;
      }
      .crawl-path {
        padding: 20px 0;
      }
      .crawl-path .edge {
        display: inline-block;
        line-height: 100%;
        vertical-align: super;
      }
      .crawl-path .edge .edge-text {
        border-bottom: solid 2px black;
        padding: 0 7px 2px 0;
        color: #555;
        font: bold 70% Monaco, Consolas, Menlo, Courier
      }
      .crawl-path .edge .edge-arrow {
        width: 0; 
        height: 0; 
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-left: 10px solid currentColor;
        display: inline-block;
        vertical-align: -100%;
      }
    </style>

  </head>

<body>
    <nav class="fixed-top navbar-light bg-light">
        <div class="container">
          <span class="navbar-brand mb-0 h1">Test Results</span>
        </div>
    </nav>
    <div class="container">
        <h1>Test results summary</h1>
        <h2><a href="localhost:8080" target="_blank">${url}</a> <span class="badge badge-light">Execution #${execution}</span></h2>
        
        <table class="table table-bordered table-striped mb-5" id="test-results-table">
          <thead>
            <th onclick="sortTable()"> Method Priority </th>
            <th>Method Name</th>
            <th>Results</th>
            <th width="120">Duration (s)</th>
          </thead>
          <tbody></tbody>
        </table>

        <h1>Test methods</h1>
        <div id="test-method-results-list"></div>    
    </div>


    <script type="text/javascript">

      var successImageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA0MjYuNjY3IDQyNi42NjciIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDQyNi42NjcgNDI2LjY2NzsiIHhtbDpzcGFjZT0icHJlc2VydmUiIHdpZHRoPSI1MTJweCIgaGVpZ2h0PSI1MTJweCI+CjxwYXRoIHN0eWxlPSJmaWxsOiM2QUMyNTk7IiBkPSJNMjEzLjMzMywwQzk1LjUxOCwwLDAsOTUuNTE0LDAsMjEzLjMzM3M5NS41MTgsMjEzLjMzMywyMTMuMzMzLDIxMy4zMzMgIGMxMTcuODI4LDAsMjEzLjMzMy05NS41MTQsMjEzLjMzMy0yMTMuMzMzUzMzMS4xNTcsMCwyMTMuMzMzLDB6IE0xNzQuMTk5LDMyMi45MThsLTkzLjkzNS05My45MzFsMzEuMzA5LTMxLjMwOWw2Mi42MjYsNjIuNjIyICBsMTQwLjg5NC0xNDAuODk4bDMxLjMwOSwzMS4zMDlMMTc0LjE5OSwzMjIuOTE4eiIvPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K";
      var failureImageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDUwIDUwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MCA1MDsiIHhtbDpzcGFjZT0icHJlc2VydmUiIHdpZHRoPSI1MTJweCIgaGVpZ2h0PSI1MTJweCI+CjxjaXJjbGUgc3R5bGU9ImZpbGw6I0Q3NUE0QTsiIGN4PSIyNSIgY3k9IjI1IiByPSIyNSIvPgo8cG9seWxpbmUgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I0ZGRkZGRjtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMDsiIHBvaW50cz0iMTYsMzQgMjUsMjUgMzQsMTYgICAiLz4KPHBvbHlsaW5lIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNGRkZGRkY7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTA7IiBwb2ludHM9IjE2LDE2IDI1LDI1IDM0LDM0ICAgIi8+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+Cjwvc3ZnPgo=";



      function sortTable() {
          var table, rows, switching, i, x, y, shouldSwitch;
          table = document.getElementById("test-results-table");
          switching = true;
         
          while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
              //start by saying there should be no switching:
              shouldSwitch = false;
              x = rows[i].getElementsByTagName("TD")[0];
              y = rows[i + 1].getElementsByTagName("TD")[0];
              if (Number(x.innerHTML) > Number(y.innerHTML)) {
                shouldSwitch = true;
                break;
              }
            }
            if (shouldSwitch) {
              rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
              switching = true;
            }
          }
        }

      var getRowTemplate = function(methodInfo) {
        var statusIconImgBase64 = methodInfo.testStatus == "success" ? successImageBase64 : failureImageBase64;
        var statusMessage = methodInfo.failureMessage == "none" ? "" :
          `<br /><span class="badge badge-pill badge-danger">${methodInfo.failureMessage}</span>`;
        var rowTemplate = `
        <tr>
         	<td>${methodInfo.methodNumber} </td>
          <td><a class="btn btn-primary" data-toggle="collapse" href="#method-test-results-${methodInfo.methodName}" aria-expanded="false" aria-controls="method-test-results-${methodInfo.methodName}">${methodInfo.methodName}</a></td>
          <td>
            <img src="data:image/svg+xml;utf8;base64,${statusIconImgBase64}" width="16" height="16" alt="${methodInfo.testStatus}" title="${methodInfo.testStatus}" />
            ${methodInfo.testStatus} ${statusMessage}
          </td>
          <td align="right">${methodInfo.duration}</td>
        </tr>`;
        return rowTemplate;
      }

      var getCrawlPathMarkup = function(methodInfo) {
        template = `<div class="crawl-path">`;
        var states = methodInfo.methodResult.crawlStates;
        var crawlPath = methodInfo.methodResult.crawlPath;
        for (var stateIndex = 0; stateIndex < states.length; stateIndex++) {
          var stateInfo = states[stateIndex];
          var imagClass = stateInfo.success == true && stateInfo.identical == true ? "border-success" : "border-danger";
          var stateImgSrc = "../../screenshots/" + stateInfo.name + ".png";
          template += `
            <a href="${stateImgSrc}" target="_blank">
              <img class="rounded-circle border ${imagClass}" style="border-width: 2px!important" src="${stateImgSrc}"
                alt="${stateInfo.name}" title="${stateInfo.name}" width="45" height="45" />
            </a>`;
          if (crawlPath[stateIndex]) {
            var crawlPathInfo = crawlPath[stateIndex];
            var eventable = crawlPathInfo.eventable;
            var edgeLabel = eventable.eventType + " " + eventable.identification.value;
            var edgeColor = crawlPathInfo.success ? "green" : "red";
            template += `
            <div class="edge">
              <span class="edge-text" style="border-color: ${edgeColor}">${edgeLabel}</span><div class="edge-arrow" style="color: ${edgeColor}"></div>
            </div>
            `
          }
        }
        template += "</div>";
        return template;
      }

      var jsonContents = `${diff_json}`;
      var parsedJson = JSON.parse(jsonContents);
      var methodNames = Object.keys(parsedJson);
      var codeDiffElements = [];
      for (var i = 0; i < methodNames.length; i++) {
        var methodName = methodNames[i];
        var methodInfo = parsedJson[methodName];
        
        // Populate the rows of the table for summary
        var tbody = document.querySelector("#test-results-table tbody");
        tbody.innerHTML += getRowTemplate(methodInfo);

        var testMethodInfoTemplate = `
          <div id="method-test-results-${methodName}" class="collapse mt-5">
            <h2>Method: ${methodName}</h2>
        `;
        // Get the crawl path graph
        testMethodInfoTemplate += getCrawlPathMarkup(methodInfo);
        
        // Show diffs per method
        if (methodInfo.testStatus != "success" || methodInfo.testStatus == "success") {
          var diffs = methodInfo.diffs;
          var stateDiffs = {};
          for (var diffIndex = 0; diffIndex < diffs.length; diffIndex++) {
            var diff = diffs[diffIndex];
            if (!stateDiffs[diff.state]) {
              stateDiffs[diff.state] = [];
            }
            stateDiffs[diff.state].push(diff);
          }
          
          testMethodInfoTemplate += `<h4>Differences</h4>`;

          var stateNames = Object.keys(stateDiffs);
          for (var stateIndex = 0; stateIndex < stateNames.length; stateIndex++) {
            var stateName = stateNames[stateIndex];

            testMethodInfoTemplate += `<h5 class="mt-3">State: ${stateName}</h5>`;
            
            var diffsForThisState = stateDiffs[stateName];
            for (var diffForThisStateIndex = 0; diffForThisStateIndex < diffsForThisState.length; diffForThisStateIndex++) {
              var diffForThisState = diffsForThisState[diffForThisStateIndex];
              if (diffForThisState.oldState.endsWith(".png")) { 
                var imgOldSrc = methodName + "/diffs/" + diffForThisState.oldState;
                var imgNewSrc = methodName + "/diffs/" + diffForThisState.newState;
                testMethodInfoTemplate += `
                <div class="container">
                  <div class="row">
                    <div class="col-sm">
                      <a href="${imgOldSrc}" target="_blank">
                        <img src="${imgOldSrc}" width="100%" />
                      </a>
                    </div>
                    <div class="col-sm">
                      <a href="${imgNewSrc}" target="_blank">
                        <img src="${imgNewSrc}" width="100%" />
                      </a>
                    </div>
                  </div>
                </div>`;
              } else {
                testMethodInfoTemplate += `<div id="dom-diff-${methodName}-${stateName}"></div>`;
                codeDiffElements.push({ "methodName": methodName, "state": stateName, "old": diffForThisState.oldState, "new" : diffForThisState.newState });
              }
            }

          }
        }

        testMethodInfoTemplate += `<hr />
        </div>`;

        // Populate the method info
        var testMethodInfoParent = document.querySelector("#test-method-results-list");
        testMethodInfoParent.innerHTML += testMethodInfoTemplate;

      }
      // Get the textual DOM diff
      for (var diffElementIndex = 0; diffElementIndex < codeDiffElements.length; diffElementIndex++) {
        var codeDiffElement = codeDiffElements[diffElementIndex];
        var target = document.querySelector(`#dom-diff-${codeDiffElement.methodName}-${codeDiffElement.state}`);
        dv = CodeMirror.MergeView(target, {
          value: codeDiffElement.old,
          origLeft: null,
          orig: codeDiffElement.new,
          lineNumbers: true,
          mode: "text/html",
          highlightDifferences: true,
          connect: true,
          collapseIdentical: true,
          readOnly: true
        });
      }
    </script>

  </body>

</html>