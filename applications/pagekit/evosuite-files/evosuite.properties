#CP=target/classes:target/EvoSuite-1.0-SNAPSHOT-jar-with-dependencies.jar:evosuite-tests
CP=target/classes
PROJECT_PREFIX=
#--------------------------------------
# Test Seeding
#--------------------------------------

# The path to the test case source.
#sourcepath=

# The classpath needed to compile the seeding test case.
#classpath=

#--------------------------------------
# Experimental
#--------------------------------------

# A colon(:) separated list of JUnit suites to execute. Can be a prefix (i.e., package name), a directory, a jar file, or the full name of a JUnit suite.
#junit=

# Apply testability transformation (Yanchuan)
#testability_transformation=false

# 
#randomize_difficulty=true

# Testability transformation
#TT=false

# Number of attempts to solve constraints related to one code branch
#constraint_solution_attempts=3

# Probability to seed on methods with randomness involved
#seed_probability=0.1

# Special treatment of JEE Servlets
#handle_servlets=false

# Also count coverage goals in superclasses
instrument_parent=false

# Probability to reuse an existing test case, if it produces a required object
#call_probability=0.0

# Probability with which existing individuals are cloned
#seed_clone=0.2

# Check contracts only once per test
#check_contracts_end=false

# Use the coverage of existing test cases
#use_existing_coverage=false

# Stop test execution if exception occurrs
break_on_exception=false

# Include remote calls --> set to false doesn't change nothing for selenium purposes: mysql connection continues to fail
remote_testing=false

# 
#enable_alternative_suite_fitness=false

# Maximum stack depth for testability transformation
#TT_stack=10

# Which factory creates tests
test_factory=ALLMETHODS

# 
#defuse_aliases=true

# Deprecated. Probability of using concolic mutation operator
#concolic_mutation=0.0

# Only include test files containing the target classname
#junit_strict=false

# Instrument the libraries used by the project under test
instrument_libraries=false

# 
#alternative_fitness_calculation_mode=SUM

# When running EvoSuite clients, for debugging purposes check its assserts
enable_asserts_for_evosuite=false

# Check JUnit theories as contracts
#junit_theories=

# Instrument code with error checking branches
#error_branches=false

# Check contracts during test execution
#check_contracts=false

# 
#starve_by_fitness=true

# Require statement coverage for branch coverage
#branch_statement=false

# The maximum level of recursion when calculating the dependencies in the test cluster
cluster_recursion=10

# Use an archive of covered goals during test generation
test_archive=true

# Skip debug information in bytecode instrumentation (needed for compatibility with classes transformed by Emma code instrumentation due to an ASM bug)
#instrumentation_skip_debug=false

# Include methods that update required static fields
#handle_static_fields=true

# 
#enable_alternative_fitness_calculation=false

# Support for JEE
jee=false

# Probability with which to use transitions out of the OUM
#usage_rate=0.5

# File storing TestGenerationResult or GeneticAlgorithm
#seed_file=

# Epson
#epson=0.01

# Cached version of inheritance tree
#inheritance_file=

# List of fully qualified class names (separated by ':') indicating which JUnit test suites the user has selected (e.g., for seeding)
#selected_junit=null

# Check asserts in the SUT
#enable_asserts_for_sut=true

# Number of mutations applied to a cloned individual
#seed_mutations=3

# Also instrument methods called from the SUT
instrument_context=false

# Produce output each time a test times out
log_timeout=true

# Jeremy's branch evaluation
#branch_eval=false

# Names of usage model files
#usage_models=

# Testability transformation
#tt_scope=ALL

# 
#defuse_debug_mode=false

# Instrument methods calls
instrument_method_calls=false

# Measure timeouts on CPU time, not global time
#cpu_timeout=false

#--------------------------------------
# Continuous Test Generation
#--------------------------------------

# How many minutes in total CTG will run
#ctg_time=3

# If specified, make a copy of all tests into the target export folder
#ctg_export_folder=null

# Number of cores CTG will use
#ctg_cores=1

# XML file which stores stats about all CTG executions
#ctg_project_info=project_info.xml

# Name of seed folder where the serialized tests are stored
#ctg_seeds_dir_name=seeds

# If true, delete all the tmp folders before starting a new CTG run
#ctg_delete_old_tmp_folders=true

# 
#ctg_tmp_reports_dir_name=reports

# Extra '-D' arguments to pass to EvoSuite test generation processes
#ctg_extra_args=null

# Absolute path of text file where classes to test are specified. This is needed for operating systems like Windows where there are hard limits on parameters' size
#ctg_selected_cuts_file_location=null

# How many minutes to allocate for each class. If this parameter is set, then ctg_time is going to be ignored. This parameter is mainly meant for debugging purposes.
#ctg_time_per_class=null

# How many minutes each class under test should have at least
#ctg_min_time_per_job=1

# File extension for serialized test files
#ctg_seeds_ext=seed

# If specified, save serialized tests to that file
#ctg_seeds_file_out=null

# Schedule used to run jobs
#ctg_schedule=BUDGET

# Where generated files will be stored
#ctg_dir=.evosuite

# 
#ctg_tmp_tests_dir_name=tests

# Port for remote debugging of 'Master' spawn processes. 'Clinet' process will have port+1. This only applies when for a single CUT.
#ctg_debug_port=null

# Comma ',' separated list of CUTs to use in CTG. If none specified, then test all classes
#ctg_selected_cuts=null

# 
#ctg_tmp_pools_dir_name=pools

# Total Memory (in MB) that CTG will use
#ctg_memory=1000

# File with the list of new(A)/modified(M)/deleted(D) files
#ctg_history_file=null

# Folder where all the best test suites generated so far in all CTG runs are stored
#ctg_bests_folder=best-tests

# If specified, load serialized tests from that file
#ctg_seeds_file_in=null

# 
#ctg_generation_dir_prefix=null

# 
#ctg_tmp_logs_dir_name=logs

#--------------------------------------
# Debugging
#--------------------------------------

# Port on localhost, to which the client VM will listen for a remote debugger; defaults to 1044
#port=1044

# Experimental: activate Flight Recorder in spawn client process for Java Mission Control
#jmc=false

# Enables profiler support in the client VM
#profile=

# Enables debugging support in the client VM
#debug=false

#--------------------------------------
# EXSYST
#--------------------------------------

# How often to write out coverage information in the background (in ms). -1 to disable.
#UI_BACKGROUND_COVERAGE_DELAY=-1

#--------------------------------------
# Test Creation
#--------------------------------------

# If a carved test throws an exception, either chop it off, or drop it
#chop_carved_exceptions=true

# Maximum number of test cases in a test suite
#max_size=100

# Use type information gathered from casts to instantiate generics
#seed_types=true

# Maximum number of tests in initial test suites
#max_initial_tests=10

# List of object pools
#object_pools=

# Use numeric dynamic seeding
#dynamic_seeding=true

# Recursion depth when trying to create objects
max_recursion=10

# Number of random tests
#num_random_tests=20

# Maximum length of randomly generated arrays
#max_array=10

# Score for selection of insertion of UUT calls
#insertion_score_uut=1

# Score for selection of insertion of call to a input parameter
#insertion_uut=0.1

# Maximum length of randomly generated strings
#string_length=20

# Maximum size of randomly generated integers (minimum range = -1 * max)
#max_int=2048

# Maximum length of strings in assertions
#max_string=1000

# Restore System.out, System.in and DebugGraphics.logStream after test execution
#reset_standard_streams=false

# File containing methods that should be included in testing
#test_includes=test.includes

# Score for selection of insertion call with existing object
#insertion_score_parameter=1

# Epsilon for floats in local search
#epsilon=0.001

# Maximum length of test suites (0 = no check)
#max_length=0

# Score for selection of insertion of call on the environment
#insertion_uut=0.1

# File containing methods that should not be used in testing
#test_excludes=test.excludes

# Score for selection of insertion of call on existing object
#insertion_score_object=1

# Number of tests in initial test suites
#num_tests=2

# Probability to replace a primitive with a random new value rather than adding a delta
#random_perturbation=0.2

# When mocking a method, define max number of mocked return values for that method. Calls after the last will just re-use the last specified value
#functional_mocking_input_limit=5

# Include deprecated methods in tests
#use_deprecated=false

# Enable test carving
#test_carving=false

# Generate unit tests for 'main(String[] args)' methods as well
#consider_main_methods=true

# Maximum size of delta for numbers during mutation
max_delta=20

# Probability to use a primitive from the dynamic pool rather than a random value
#dynamic_pool=0.5

# Percentage [0,1] of search budget after which reflection fields/methods handling is activated
#reflection_start_percent=0.5

# Call static constructors only after each a static field was modified
reset_static_fields=true

# Probability to reuse an existing reference, if available
#object_reuse_probability=0.9

# Probability to reuse an existing primitive, if available
#primitive_reuse_probability=0.5

# Percentage [0,1] of search budget after which functional mocking can be activated. Mocking of missing concrete classes will be activated immediately regardless of this parameter
functional_mocking_percent=0

# Carve junit tests for pool
#carve_object_pool=false

# Replace string.equals with levenshtein distance
#string_replacement=true

# Probability to use a predefined sequence from the pool rather than a random generator
p_object_pool=0.3
#p_object_pool=1

# Score for selection of insertion of UUT calls
#new_object_selection=true

# Number of attempts when generating an object before giving up
#max_attempts=1000

# Maximum level of nesting for generic types
#max_generic_depth=3

# Minimum number of tests in initial test suites
#min_initial_tests=1

# Probability [0,1] of using functional mocking (eg Mockito) when creating object instances
p_functional_mocking=0.0

# Prohibit integers in the pool greater than max_int
#restrict_pool=false

# If set to true EvoSuite test generation inits UISpec in order to avoid display of UI
#evosuite_use_uispec=false

# Probability to use a primitive from the pool rather than a random value
#primitive_pool=0.8
primitive_pool=0

# Probability to use null instead of constructing an object
null_probability=0.0

# Probability [0,1] of using reflection to set private fields or call private methods
p_reflection_on_private=0.0

# Score for selection of insertion of UUT calls
#insertion_uut=0.1

# Number of dynamic constants to keep
#dynamic_pool_size=50

# Probability of using a non-standard call on a special case (collection/numeric)
p_special_type_call=0

#--------------------------------------
# Single Branch Mode
#--------------------------------------

# Number of random tests to run before test generation (Single branch mode)
#random_tests=0

# Shuffle test goals before test generation (Single branch mode)
#shuffle_goals=true

# Use leftover budget on unsatisfied test goals (Single branch mode)
#reuse_budget=true

# Seed initial population with related individuals (Single branch mode)
#recycle_chromosomes=true

# Skip coverage goals that have already been (coincidentally) covered
#skip_covered=true

#--------------------------------------
# Sandbox
#--------------------------------------

# Usa a virtual file system for all File I/O operations
virtual_fs=false

# Execute tests in a sandbox environment 
sandbox=false

# Usa a virtual network for all TCP/UDP communications
virtual_net=false

# Drop tests that require the sandbox
#filter_sandbox_tests=false

# Mode in which the sandbox is applied
sandbox_mode=OFF

# Usa a separate classloader in the final test cases
#use_separate_classloader=true

#--------------------------------------
# TestCreation
#--------------------------------------

# Change default package rights to public package rights
#make_accessible=false

#--------------------------------------
# Test Execution
#--------------------------------------

# Milliseconds allowed to execute the static reset of a test
timeout_reset=10000

# Max number of threads allowed to be started in each test
#max_started_threads=100

# Max number of iterations allowed per loop. A negative value means no check is done.
max_loop_iterations=-1

# Number of timeouts before we consider a mutant killed
#mutation_timeouts=3

# Number of generations before changing the currently targeted mutants
#mutation_generations=10

# Replace nondeterministic calls and System.exit
#replace_calls=true

# Milliseconds allowed to execute the body of a test
timeout=1000000

# Milliseconds grace time to shut down test cleanly
#shutdown_timeout=1000

# Hard limit on array allocation in the code
#array_limit=1000000

# Replace System.in with a smart stub/mock
#replace_system_in=true

# Milliseconds allowed per test during concolic execution
#concolic_timeout=15000

# Maximum number of mutants to target at the same time
#max_mutants=100

#--------------------------------------
# DSE
#--------------------------------------

# Indicates the path to the Z3 solver
#z3_path=null

# Rank branch conditions
#dse_rank_branch_conditions=true

# Keep tests even if they do not increase fitness
#dse_keep_all_tests=false

# Indicates the path to the CVC4 solver
#cvc4_path=null

# Maximum number of solving time for Constraint solver in milliseconds
#dse_constraint_solver_timeout_millis=1000

# Probability used to specify when to use DSE instead of regular LS when LS is applied
#dse_probability=0.5

# Negate all branch conditions in the path condition (covered or not)
#dse_negate_all_conditions=true

# Maximal length of the constraints in DSE
#dse_constraint_length=100000

# Probability with which to use constants from the constraints when resetting variables during search
#dse_constant_probability=0.5

# Indicates the path to the Z3-Str2 solver
#z3_str2_path=null

# Times DSE resets the int and real variables with random values
#dse_variable_resets=2

# Granularity of DSE application
#local_search_dse=TEST

# Specify which constraint solver to use. Note: external solver will need to be installed and cofigured separately
#dse_solver=EVOSUITE_SOLVER

#--------------------------------------
# Output
#--------------------------------------

# Minimize test suite after generation
minimize=true

# How many mutants can be used as target for a single class
#max_mutants_per_class=1000

# Print out current goal during test generation
print_current_goals=true

# Selects only an underapproximation of all inspectors that are also pure (no side-effects)
#pure_inspectors=true


# Location of where to locate tools.jar
#tools_jar_location=null

# How many mutants to use when trying to find assertions for a test
#max_mutants_per_test=100

# Directory name where the best chromosomes are saved
seed_dir=evosuite-seeds

# Print out missed goals at the end
print_missed_goals=true

# Maximum number of statements (normal statements and assertions)
#max_length_test_case=2500

# Minimize test suite using old algorithm
#minimize_old=false

# Store test suite on Ctrl+C
#shutdown_hook=true

# Extend existing JUnit test suite
#junit_extend=

# Sort goals before Minimization
#minimize_sort=true

# Include the GA instance in the test generation result
#serialize_ga=false

# Avoid runtime dependencies in JUnit test
#no_runtime_dependency=false

# Create html reports
html=true

# How many mutants can be inserted into a single method
#max_mutants_per_method=700

# Suffix used to specify scaffolding files
#scaffolding_suffix=scaffolding

# Include a header with coverage information for each test
test_comments=true

# Selects only an underapproximation of equals(Object) that are also known to be pure (no side-effects)
#pure_equals=false

# Keep sequences for object pool
#write_pool=

# Print out goals of class under test
print_goals=true

# Filter flaky assertions
#filter_assertions=false

# List of criteria which should be measured on the completed test suite
#analysis_criteria=

# Serialize result of search to main process
#serialize_result=false

# Suffix that is appended at each generated JUnit file name
#junit_suffix=_ESTest

# What strategy to use to derive names for tests
#test_naming_strategy=NUMBERED

# Create a CSV file for each individual evolution
log_goals=true

# Directory in which to place JUnit tests
test_dir=evosuite-tests

# Generate all the scaffolding needed to run EvoSuite JUnit tests in a separate file
#test_scaffolding=true

# (Experimental) If enable, the best minimized test suite with assertions is saved
#serialize_regression_test_suite=false

# Format of the resulting test cases
#test_format=JUNIT4

# List of variables to output to CSV file. Variables are separated by commas. Null represents default values
output_variables=LineCoverage,Statements_Executed,Tests_Executed,Fitness_Evaluations,Total_Time

# Which assertions to generate
#assertion_strategy=MUTATION

# Directory in which to put HTML and CSV reports
report_dir=evosuite-report

# Label that identifies the used configuration of EvoSuite. This is only done when running experiments.
#configuration_id=null

# Show progress bar on console
#show_progress=true

# File with relation of tests and covered goals
covered_goals_file=evosuite-report/covered.goals

# Which backend to use to collect data
#statistics_backend=CSV

# Create JUnit test suites
#junit_tests=true

# Create plots of size and fitness
#plot=false

# Print out covered goals during test generation
#print_covered_goals=false

# Calculate coverage after test suite generation
#coverage=true

# Time interval in milliseconds for timeline statistics
#timeline_interval=60000

# Maximum depth in the calltree to count a branch as covered
#max_coverage_depth=-1

# Create a coverage matrix (each row represents the coverage a test case, and each column represents one goal
#coverage_matrix=false

# Verbosity level of logger
log.level=INFO

# Compile and run resulting JUnit test suite (if any was created)
junit_check=false

# Allow test output on console
print_to_system=true

# Target logger - all logging if not set
log.target=all

# Compile and run resulting JUnit test suite on a separate process
#junit_check_on_separate_process=false

# Write covered goals file
write_covered_goals_file=true

# Create assertions
assertions=false

# Minimize test suite after generation
#minimize_skip_coincidental=true

# Label that specifies a group the SUT belongs to. This is only needed for running experiments.
#group_id=none

# Validate runtime values before writing statistics
#validate_runtime_variables=true

# Create CFG graphs
#write_cfg=false

# Perform a second minimization pass as the first one may retain subsumed tests
#minimize_second_pass=true

# Use the new statistics backend on the master
#new_statistics=true

# Generate and store all data reports
save_all_data=true

# Precision to use in double comparisons and assertions
#double_precision=0.01

# Precision to use in float comparisons and assertions
#float_precision=0.01

# Inline all constants
inline=false

# Write all test cases for a class into a single file or to separate files.
#output_granularity=MERGED

# How many replacement mutants can be inserted for any one variable
#max_replace_mutants=100

# Interpolate timeline values
#timeline_interpolation=true

#Minimize constants and method calls
minimize_values=false

#Try to minimise strings by deleting non-printables. The parameter minimize_values must also be true
minimize_strings=true

#--------------------------------------
# Local Search
#--------------------------------------

# Probability of applying local search at every X generation
#local_search_probability=1.0

# Perform local search on primitive values
#local_search_strings=true

# Maximum budget usable for improving individuals per local search
#local_search_budget=5

# Perform local search on reference types
#local_search_references=true

# Add tests that cover branches already covered in the past
#local_search_restore_coverage=false

# How many mutations to apply to a string to check whether it improves coverage
#local_search_probes=10

# Apply local search at every X generation
#local_search_rate=-1

# Expand test cases before applying local search such that each primitive is used only once
#local_search_expand_tests=true

# Perform local search on primitive values
#local_search_primitives=true

# Interpretation of local_search_budget
#local_search_budget_type=TIME

# Apply local search only to individuals that changed fitness
#local_search_selective=false

# Perform local search on array statements
#local_search_arrays=true

# If a branch is only executed once by a test suite, duplicate that test
#local_search_ensure_double_execution=true

# Parameter used to adapt at runtime the probability of applying local search
#local_search_adaptation_rate=0.33

# Only check primitives for selective LS
#local_search_selective_primitives=false

#--------------------------------------
# Test Generation
#--------------------------------------

# Run Java in AWT Headless mode
#headless_mode=true

#--------------------------------------
# Search Algorithm
#--------------------------------------

# Activate the second secondary objective after a certain amount of search budget
#enable_secondary_starvation=false

# Seconds allowed to write on disk the generated JUnit files
write_junit_timeout=1200

# Seed used for random generator. If left empty, use current time
#random_seed=

# Activate the second secondary objective after a certain amount of search budget
#enable_secondary_objective_after=

# Seconds allowed for carving JUnit tests
#carving_timeout=120

# What to use as limit for the population size
#population_limit=INDIVIDUALS

# Probability of crossover
crossover_rate=0.75
#crossover_rate=0.75

# Stop optimization once goal is covered
#stop_zero=true

# Extra seconds allowed for the search
extra_timeout=60

# Maximum length of chromosomes during search
chromosome_length=40

# If a phase is ended before its timeout, allow the next phase to run over its timeout
#reuse_leftover_time=false

# Chop statements after exception if length has reached maximum
#chop_max_length=true

# Initial probability of inserting a new statement in a test case
#p_change_parameter=0.1

# Activate headless chicken test
#headless_chicken_test=false

# Population size of genetic algorithm
population=50

# Multiply search budget by number of test goals
#dynamic_limit=false

# Selection function during search
#selection_function=RANK

# Track gradient branches that were covered
#track_covered_gradient_branches=false

# Maximum seconds allowed for entire search when not using time as stopping criterion
global_timeout=36000

# Elite size for search algorithm
#elite=1

# Replacement function for comparing offspring to parents during search
#replacement_function=DEFAULT

# Crossover function during search
#crossover_function=SINGLEPOINTRELATIVE

# Check length against fixed maximum
#check_max_length=true

# Maximum relative increase in length
#bloat_factor=2

# Number of individuals for tournament selection
#tournament_size=10

# Number of single mutations applied on an individual when a mutation event occurs
#number_of_mutations=1

# Probability of changing statements during mutation
p_test_change=0.3333333333333333
#p_test_change=0.9999999999999999

# Activate the second secondary objective after a certain amount of search budget
#starvation_after_generation=500

# Track branches that have a distance of either 0 or 1
#track_boolean_branches=false

# Check length against length of parents
#check_parents_length=false

# Bias for better individuals in rank selection
#rank_bias=1.7

# Initial probability of inserting a new statement in a test case
p_statement_insertion=0.5

# Track branch comparison types based on the bytecode
#branch_comparison_types=false

# What condition should be checked to end the search
#stopping_condition=MAXTIME

# Track population diversity
#track_diversity=false

# Initial probability of inserting a new test in a test suite
p_test_insertion=0.1

# Secondary objective during search
#secondary_objectives=totallength

# Seconds allowed for assertion generation at the end
assertion_timeout=200

# Check against parents in Mu+Lambda algorithm
#parent_check=true

# Probability of deleting statements during mutation
p_test_delete=0.3333333333333333
#p_test_delete=0

# Probability of mutation
#mutation_rate=0.9
mutation_rate=0.75

# Maximum search duration (45 m)
search_budget=2700

# Seconds allowed for checking the generated JUnit files (e.g., compilation and stability)
junit_check_timeout=20

# Seconds allowed for initializing the search
initialization_timeout=1200

# Search algorithm
#algorithm=MONOTONICGA

# Penalty for duplicate individuals
#kincompensation=1.0

# Seconds allowed for minimization at the end
minimization_timeout=108000

# Probability of inserting new statements during mutation
p_test_insert=0.3333333333333333
#p_test_insert=0

# Check length against length of best individual
#check_best_length=true

#--------------------------------------
# Plugin
#--------------------------------------

# Running plugin for experiments. Use EvoSuiteTest annotation and decorate generated tests with (checked = false).
#eclipse_plugin=false

#--------------------------------------
# Selenium
#--------------------------------------

#Activate or deactivate evosuite modifications (whole test suite strategy) for selenium purpose
selenium_whole=true

#Address of the chromedriver (the only supported at the moment) tool in order to create the driver
chromedriver_address=http://localhost:9515

#Website address in order to reset the driver
website_address=http://localhost:3000/pagekit/index.php/admin/login

#Path of graph file in dot format
graph_path=workspace/graphs/pagekit.txt

#Probability of generating test cases with respect path sequences according to the graph
path_sequence_rate=1.0

#Start node in the graph
start_node=DashboardContainerPage

#Minimum size of a test case
test_minimum_size=2

#Minimum length of a path during creation of subgraph (see getAllPaths in http://jgrapht.org/javadoc/org/jgrapht/alg/shortestpath/AllDirectedPaths.html)
path_max_length_subgraph=10

#Reset or not the driver during evolution and minimization phase of the genetic algorithm
reset_driver=false

#Activate or deactivate custom mutation delete based on graph based method sequences
custom_mutation_delete=true

#Activate or deactivate custom mutation insert based on graph based method sequences
custom_mutation_insert=true

#Activate or deactivate custom mutation change that changes only primitive values
custom_mutation_change=true

#Activate or deactivate custom crossover at test case level, in addition to crossover at test suite level
test_case_crossover=true

#Probability of having crossover at test case level, instead of crossover at test suite level
test_case_crossover_rate=0.5

#Activate or deactivate the possibility of generating null object for entity with parameters statements
mutation_change_null_object=false

#TODO
false_goals=false

#Activate or deactivate the selection of only a subset of the false goals during test suite writing
select_false_goals=false

#Activate or deactivate custom minimization desired goals that one would cover
custom_minimization=false

#Activate or deactivate search stop after all false branches are covered, independently from the coverage of the true branches
stop_on_true=false

#Activate or deactivate the possibility of adding public field of the unit under test UUT (dependencies included). We want to take only public methods from the UUT.
add_fields_uut=false

#Reset application state before each test case execution
reset_app_state=true

#Reset db after each test case execution: doesn't apply if RESET_STATE is false
reset_mysql_db=true

#Name of db to reset: doesn't apply if RESET_STATE and RESET_DB are false
reset_mysql_db_name=walletjs

#Username of db to reset: doesn't apply if RESET_STATE and RESET_MYSQL_DB are false
reset_mysql_db_user=root

#Password of db to reset: doesn't apply if RESET_STATE and RESET_MYSQL_DB are false
reset_mysql_db_pass=root

#Db tables to reset separeted by ':' : doesn't apply if RESET_STATE and RESET_MYSQL_DB are false
reset_mysql_db_tables=wallets:wallet_accesses:users:transactions:plans:plan_wallets:authentications

#Activate or deactivate logout action after execution of each test case: doesn't apply if RESET_STATE is false
reset_logout=true

#Clear cookies during logout action after execution of each test case: doesn't apply if RESET_STATE and LOGOUT are false
reset_cookies=true

#Cookie names to reset separated by ':' : doesn't apply if RESET_STATE, LOGOUT and RESET_COOKIES are false
reset_cookie_names=is_logged_in_user:logged_in_user

#Activate or deactivate random generation of chars which generates only number and letters with equal probability
random_char_number_letters=true

#MOSA changes when MOSA strategy and algorithm are enabled
custom_mosa=true

#Activate or deactivate the possibility of covering only false branches of the class under test during the evolution
only_false_branches=true

#Adaptive random testing FSCS algorithm, number of candidate solutions to generate at each step of the evloution
art_algorithm_num_candidates=50

#Enable or disable input diversity computation in ART
input_distance=false

#Source code system path. It is needed for source code parsing in ART
source_code_system_path=workspace/fse2019/pagekit

#In ART for computing input diversity: value property of these custom classes that implement this interface has to be considered as it is.
custom_interface_name=IntRange

#In ART for computing input diversity: classes in the SOURCE_CODE_SYSTEM_PATH that implement this interface are custom classes
test_data_interface=TestData

#Enable or disable mocking of System.currentTimeMillis() during <<runtime>> instrumentation.
mock_system_millis=false

#Max time a thread can sleep during test case execution (if a Thread.sleep() is executed inside a test case) in ms.
max_sleep_time=5000

#Print the test case that is about to be executed, in file debug.txt in user desktop.
debug_test_case=false

#Qualified name (org.main.Reset -> with the package name) of the class to be instantiated before each test case execution. I assume that the method to be called being reset with one argument that is the app url.
reset_class_name=po_utils.ResetAppState

#Enable or disable the possibility of generating only values listed in the enum class when a method of a test case accepts an interface as input and the classes that implement this interface are enum.
enum_test_data_generation=true

#Name of the project/application you are testing.
application_name=Pagekit

#Enable or disable the possibility of filtering lines to cover for model transition coverage purposes.
filter_lines_to_cover=true

#List of lines to cover obtained using cut-instrumenter project, separeted by ':'. Property used when line coverage criterion is toggled and filter_lines_to_cover = true.
lines_to_cover=30:35:40:71:80:91:126:154:163:174:203:214:227:252:257:262:267:289:296:304:314:320:347:365:380:396:421:426:447:452:479:490:515:533:553:575:603:635:664:696:713:726:746:763:775:793:812:834:837:864:889:906:919:932:945:958:971:983:995:1012:1033:1057:1082:1109:1134:1152:1165:1178:1191:1204:1217:1229:1241:1263:1266:1285:1303:1320:1333:1346:1359:1372:1385:1397:1409:1428:1446:1459:1472:1485:1498:1511:1523:1535:1550:1563:1576:1589:1602:1615:1628:1640:1652:1667:1686:1706:1727:1747:1767:1788:1808:1833:1862:1884:1901:1914:1929:1946:1958:1970:1982:2000:2025:2047:2070:2091:2113:2138:2166:2198:2216:2229:2242:2255:2268:2281:2293:2305:2317:2338:2368:2392:2410:2423:2436:2449:2461:2474:2486:2498:2511:2528:2552:2580:2611:2629:2642:2655:2668:2681:2693:2706:2718:2730:2744:2758:2772:2786:2802:2822:2842:2862:2882:2903:2924:2942:2955:2971:2988:3000:3012:3024:3039:3060:3080:3101:3126:3155:3184:3201:3214:3227:3240:3252:3265:3277:3289:3302:3319:3341:3364:3398:3436:3460:3478:3491:3504:3517:3529:3542:3554:3566:3579:3596

#By default evosuite when it writes test cases in the final test suite chops all lines of code in a test case after an exception. When this property is true this will not happen.
print_code_after_exception=true

#Enable re-execution of a test case with a higher sleep timeout if the test case fails for a selenium exception.
add_sleep_statements_in_test_case=true

#Max number of times a test case can be re-executed if it failed because of a selenium exception before giving up.
max_attempts_execution_test_case=3

#If CUT uses custom exceptions instead of return statements when preconditions are not satisfied.
cut_exceptions=true

#Custom exceptions used by the CUT.
custom_exceptions=NotInTheRightPageObjectException:NotTheRightInputValuesException

#Use a queue instead of a list to store already executed test cases in ART.
queue_art=false

#Capacity of the queue that keeps already executed test cases.
queue_capacity=200
